// structuredClone(), отдельно остановиться на ограничениях, JSON.parse JSON.stringify - работа, возможности и ограничения. На ограничениях могут делать акцент на срезе.

// При копировании объекта с помощью JSON.parse и JSON.stringify могут возникнуть следующие ограничения:

// Потеря типа данных. Значения примитивных типов данных (строки, числа, логические значения) будут преобразованы в соответствующие типы JavaScript. Для объектов, массивов и функций это может привести к потере их исходной структуры и свойств.
// Не обрабатываются циклические ссылки. Если объект содержит циклическую ссылку (например, объект ссылается на себя), то при преобразовании в строку JSON и последующем анализе с помощью JSON.parse, эта ссылка будет потеряна.
// Не копируются геттеры и сеттеры. Геттеры и сеттеры — это специальные функции, которые используются для управления доступом к свойствам объекта. При использовании JSON.stringify и JSON.parse они не будут скопированы.
// Проблемы с функциями. Функции не могут быть сериализованы с помощью JSON, поэтому при копировании объекта, содержащего функцию, она будет потеряна.
// Потеря метаданных. Любые дополнительные метаданные, связанные с объектом (например, аннотации типов или комментарии), также будут потеряны при преобразовании объекта в строку JSON.

// >>>>>>>>>>>>>>>
const workingObject = {
  a: [1, 2, 3, innerObject],
};

// >>>>>>>>>>>>>>>
// Использование оператора spread:
// const copiedWorkingObject = { ...workingObject };

// Этот метод создаёт новый объект, копируя все свойства из workingObject.

// >>>>>>>>>>>>>>>
// Метод Object.assign():
// const copiedWorkingObject = Object.assign({}, workingObject);

// Object.assign() копирует все перечисляемые собственные свойства из одного или нескольких исходных объектов в целевой объект. В этом случае мы используем пустой объект {} как целевой, чтобы создать копию workingObject.

// >>>>>>>>>>>>>>>
// Клонирование с помощью библиотеки Lodash:
// import cloneDeep from 'lodash.clonedeep';

// const copiedWorkingObject = cloneDeep(workingObject);

// Lodash предоставляет множество утилит для работы с коллекциями и значениями. cloneDeep() глубоко клонирует объект, создавая новые копии всех значений.

// >>>>>>>>>>>>>>>
// Создание копии через JSON.parse() и JSON.stringify():
const jsonString = JSON.stringify(workingObject);
// const copiedWorkingObject = JSON.parse(jsonString);

// JSON.stringify() преобразует объект в строку JSON, а JSON.parse() создаёт новый объект из этой строки. Этот метод работает только для простых объектов и не подходит для сложных структур данных.

// >>>>>>>>>>>>>>>
// Копирование с использованием библиотеки immer:
// import produce from 'immer';

const copiedWorkingObject = produce((draft) => {
  draft.a = workingObject.a;
});

// Immer — это библиотека, которая позволяет создавать иммутабельные копии объектов. Она особенно полезна для управления состоянием в React приложениях.
